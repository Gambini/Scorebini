@page "/"
@page "/settings"

@using Scorebini.Data
@inject ScoreboardSettingsService SBSettingsService 

<h1>SettingsEditor</h1>

@if(!LoadResult.HasValue)
{
    <p><em>Loading...</em></p>
}
else if(LoadResult == false)
{
    <p><em>Error loading settings.</em></p>
}
else
{ 
    <p>
        <label>
            Output Directory
            <input @bind="SBSettings.OutputDirectory" />
        </label>
        <h5 class="small">@System.IO.Path.GetFullPath(SBSettings.OutputDirectory)</h5>
    </p>
    <p>
        <label>
            Update Interval (seconds)
            <input @bind="SBSettings.UpdateIntervalSeconds" />
        </label>
    </p>
    <p>
        <label>
            Scorebini Twitch API URL
            <input @bind="SBSettings.ScorebiniTwitchApi" />
        </label>
    </p>
    <Select
        TValue="int"
        SelectedValue="@SBSettings.SelectedProfileIndex"
        SelectedValueChanged="@OnSelectedProfileChanged"
        >
        @for(int i = 0; i < SBSettings.Profiles.Count; i++)
        {
            var profile = SBSettings.Profiles[i];
            <SelectItem Value="@i">
                @profile.ProfileName
            </SelectItem>
        }
    </Select>
    @if(SBSettings.GetSelectedProfile() != null)
    {
        <ProfileSettingsEditComponent
            Profile="@(SBSettings.GetSelectedProfile())"
            ParentSettings="@(SBSettings)"
            />
    }
    <button class="btn-primary" @onclick="SaveSettings">
        Save
    </button>
}

@code {

    ScoreboardSettings SBSettings = new();
    private bool? LoadResult;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadResult = SBSettingsService.LoadSettings();
        if(LoadResult == true)
        {
            SBSettings = SBSettingsService.CurrentSettings;
        }
    }

    private void SaveSettings()
    {
        SBSettingsService.SaveSettings(SBSettings);
    }


    void OnSelectedProfileChanged(int index)
    {
        SBSettings.SelectedProfileIndex = index;
    }
}
