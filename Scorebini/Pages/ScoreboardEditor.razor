@page "/scoreboard"
@using Scorebini.Data
@using Scorebini.Shared
@using Microsoft.Extensions.Logging
@inject TournamentService TournamentSvc 
@inject ScoreboardSettingsService SettingsSvc
@inject CommentatorService CommentatorSvc
@inject ILogger<ScoreboardEditor> Log
@implements IDisposable

<h3>ScoreboardEditor</h3>
<p>
    <label>
        Challonge/Start.gg URL
        <input @bind="InputState.Url" />
    </label>
    <div>
        <button class="btn btn-primary" @onclick="(async () => await UpdateContext())" disabled="@DisableUpdateButton">
            <div class="oi oi-data-transfer-download" />
            Pull
        </button>
        <button class="btn btn-primary" @onclick="(async () => await PushScore())" disabled="@(!CanPushScore || DisableUpdateButton)">
            Push
            <div class="oi oi-data-transfer-upload" />
        </button>
    </div>
    @if(ContextUpdateErrors != null && ContextUpdateErrors.Count > 0)
    {
        foreach(var errStr in ContextUpdateErrors)
        {
            <TournamentAlertMessage Color="Color.Danger" Message="@errStr" Visible=true />
        }
    }
    @if(PushScoreErrors != null)
    {
        foreach(var errStr in PushScoreErrors)
        {
            <TournamentAlertMessage Color="Color.Danger" Message="@errStr" Visible=true />
        }
    }
    @if(ContextUpdateWarnings != null)
    {
        foreach(var errStr in ContextUpdateWarnings)
        {
            <TournamentAlertMessage Color="Color.Warning" Message="@errStr" Visible=true />
        }
    }
</p>

@if(Tournament != null)
{

    <div>
        <PlayerInputComponent 
            @ref="Player1Input"
            PlayerState="@InputState.Player1"
            Tournament="@Tournament"
            PlayerIndex=0
            MatchSelected="@OnMatchSelected"
            PlayerSelected="@OnPlayerSelected"
            />
        <PlayerInputComponent 
            @ref="Player2Input"
            PlayerState="@InputState.Player2"
            Tournament="@Tournament"
            PlayerIndex=1
            MatchSelected="@OnMatchSelected"
            PlayerSelected="@OnPlayerSelected"
            />
    </div>
    <div class="mt-1" />
    <button class="btn btn-primary" @onclick="SwapPlayerButtonClicked">
        <div class="oi oi-transfer transfer-btn-icon" />
        Swap Players
    </button>
    <div class="mt-1" />
    <select style="height: 2.5em" name="round_name" value="@InputState.RoundName" @onchange="RoundNameInputChanged">
        <optgroup label="All Matches">
            @foreach(var name in TournamentSvc.GetAllMatchNames(Tournament))
            {
                <option value="@name">@name</option>
            }
        </optgroup>
    </select>
    <div class="mt-4" />
    <button class="btn btn-primary" @onclick="UpdateScoreboardButtonClicked">
        <div class="oi oi-pencil" />
        Update Scoreboard
    </button>
}
@if (Commentators != null)
{
    <p>
        <h3>Commentators:</h3>
    </p>
    <div>
        @for(int i = 0; i < InputState.Commentators.Count; i++)
        {
            var comm = InputState.Commentators[i];
            int idx = i;
            <CommentatorListItem 
                                 Comm=@comm 
                                 Index=@idx
                                 UpClicked="@CommentatorUpBtnClicked"
                                 DownClicked="@CommentatorDownBtnClicked"
                                 DeleteClicked="@CommentatorDeleteBtnClicked"
                                 />
        }
        <button class="btn btn-secondary" @onclick="AddCommentatorButtonClicked">
            +
        </button>
    </div>
}


@code {

    ScoreboardInputState InputState = new();

    bool _isUpdatingContext = false;
    bool DisableUpdateButton => string.IsNullOrWhiteSpace(InputState.Url) || _isUpdatingContext;
    bool CanPushScore => (InputState.MatchId.HasValue == true) && (Tournament?.IsValidMatchId(InputState.MatchId) == true);

    List<string> ContextUpdateErrors = null;
    List<string> PushScoreErrors = null;
    List<string> ContextUpdateWarnings = null;

    TournamentView Tournament = null;
    CommentatorList Commentators = null;

    public List<Commentator> SelectedCommentators = new();

    System.Timers.Timer UpdatePollTimer;
    DateTime PrevUpdateTime;

    PlayerInputComponent Player1Input;
    PlayerInputComponent Player2Input;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(SettingsSvc.CurrentSettings == null)
        {
            SettingsSvc.LoadSettings();
        }
        InputState = SettingsSvc.LoadInputState();
        Commentators = SettingsSvc.LoadCommentators();
    }


    public void Dispose()
    {
        Log.LogInformation("Disposing scoreboard editor page");
        if (UpdatePollTimer != null)
        {
            UpdatePollTimer.Elapsed -= UpdatePollEventCallback;
            UpdatePollTimer?.Dispose();
        }
    }

    private async Task UpdateContext()
    {
        if (UpdatePollTimer == null)
        {
            Log.LogInformation("Initializing auto update timer");
            // Init poll timer when the user first clicks the button
            PrevUpdateTime = DateTime.UtcNow;
            UpdatePollTimer = new System.Timers.Timer(1000.0); // tick every second
            UpdatePollTimer.Elapsed += UpdatePollEventCallback;
            UpdatePollTimer.Start();
        }
        _isUpdatingContext = true;
        StateHasChanged(); // ensure button is disabled
        SettingsSvc.SaveInputState(InputState);
        var context = await TournamentSvc.InitForTournamentUrl(InputState.Url);
        if(context == null || !context.IsValid)
        {
            // Only clear the current state if the user has requested a new tournament. Otherwise,
            // clearing 'Tournament' would cause the screen to go blank for intermittent network errors.
            if (Tournament?.Url != context?.Url)
            {
                Tournament = null;
            }
            // Still want to display the errors.
            ContextUpdateErrors = context?.RequestErrors;
        }
        else
        {
            Tournament = new TournamentView(context);
            ContextUpdateErrors = null;
        }
        ContextUpdateWarnings = context?.Warnings;
        _isUpdatingContext = false;
        PrevUpdateTime = DateTime.UtcNow;
        StateHasChanged();
    }


    private async Task PushScore()
    {
        _isUpdatingContext = true;
        StateHasChanged();
        SettingsSvc.SaveInputState(InputState);
        if(Tournament.Model?.IsValid == true
            && InputState.MatchId.HasValue 
            && InputState.Player1?.Id.HasValue == true
            && InputState.Player2?.Id.HasValue == true)
        {
            MatchScoreReport report = new MatchScoreReport();
            if(Tournament.Matches.TryGetValue(InputState.MatchId, out var match))
            {
                report.Match = match;
            }
            if (Tournament.Participants.TryGetValue(InputState.Player1.Id, out var p1))
            {
                report.Scores.Add(new MatchScoreReport.Score()
                {
                    Player = p1,
                    Wins = InputState.Player1.Score
                });
            }
            if (Tournament.Participants.TryGetValue(InputState.Player2.Id, out var p2))
            {
                report.Scores.Add(new MatchScoreReport.Score()
                {
                    Player = p2,
                    Wins = InputState.Player2.Score
                });
            }
            report.Tournament = Tournament;
            var result = await TournamentSvc.PushScore(report);
            if(result.Success)
            {
                PushScoreErrors = null;
            }
            else
            {
                PushScoreErrors = result.Errors;
            }
        }
        _isUpdatingContext = false;
        await UpdateContext();
    }


    private async void UpdatePollEventCallback(object sender, System.Timers.ElapsedEventArgs args)
    {
        if (_isUpdatingContext) // don't stack up update calls
            return;

        int updateInterval = SettingsSvc.CurrentSettings?.UpdateIntervalSeconds ?? -1;
        DateTime now = DateTime.UtcNow;
        if ((updateInterval > 0) && ((now - PrevUpdateTime) > TimeSpan.FromSeconds(updateInterval)))
        {
            Log.LogInformation("Automatically pulling bracket update info.");
            await InvokeAsync(async () => await UpdateContext());
        }
    }

    void ReadNonBoundValuesForPlayers()
    {
        Player1Input.ReadNonBoundValues();
        Player2Input.ReadNonBoundValues();
    }

    private void UpdateScoreboardButtonClicked()
    {
        ReadNonBoundValuesForPlayers();
        SettingsSvc.SaveInputState(InputState);
        if(SettingsSvc.CurrentSettings == null)
        {
            SettingsSvc.LoadSettings();
        }
        SettingsSvc.WriteOutputFiles(SettingsSvc.CurrentSettings, InputState);
    }

    public Task OnMatchSelected(PlayerInputMatchSelectedEventArgs args)
    {
        InputState.MatchId = args.Match.Id;
        InputState.RoundName = args.Match.RoundName;
        if (args.Sender == Player1Input)
        {
            Player2Input.UpdateFromMatchSelection(args);
        }
        else
        {
            Player1Input.UpdateFromMatchSelection(args);
        }

        return Task.CompletedTask;
    }


    public Task OnPlayerSelected(PlayerInputPlayerSelectedEventArgs _)
    {
        InputState.MatchId = new();
        return Task.CompletedTask;
    }

    private void RoundNameInputChanged(ChangeEventArgs e)
    {
        string val = e.Value as string;
        InputState.RoundName = val ?? "";
        StateHasChanged();
    }


    private void SwapPlayerButtonClicked()
    {
        ReadNonBoundValuesForPlayers();
        InputState.SwapPlayers();
        Player1Input.PlayerStateSwapped(InputState.Player1);
        Player2Input.PlayerStateSwapped(InputState.Player2);
        StateHasChanged();
    }


    private void AddCommentatorButtonClicked()
    {
        InputState.Commentators.Add(new Commentator());
    }

    private void CommentatorUpBtnClicked(int idx)
    {
        if (idx == 0)
        {
            Log.LogInformation($"btn up idx == 0 (idx = {idx})");
            return;
        }
        if (idx >= InputState.Commentators.Count)
        {
            Log.LogInformation($"btn up idx >= InputState.Commentators.Count  (idx = {idx} Count = {InputState.Commentators.Count})");
            return;
        }
        if (InputState.Commentators.Count == 1)
        {
            Log.LogInformation($"btn up (InputState.Commentators.Count == 1) (Count = {InputState.Commentators.Count})");
            return;
        }

        var prev = InputState.Commentators[idx-1];
        InputState.Commentators[idx - 1] = InputState.Commentators[idx];
        InputState.Commentators[idx] = prev;
    }

    private void CommentatorDownBtnClicked(int idx)
    {
        if ((idx + 1) >= (InputState.Commentators.Count))
        {
            Log.LogInformation($"btn down ((idx + 1) >= InputState.Commentators.Count) (idx = {idx} Count = {InputState.Commentators.Count})");
            return;
        }
        if (InputState.Commentators.Count == 1)
        {
            Log.LogInformation($"btn down (InputState.Commentators.Count == 1)) (Count = {InputState.Commentators.Count})");
            return;
        }

        var next = InputState.Commentators[idx + 1];
        InputState.Commentators[idx + 1] = InputState.Commentators[idx];
        InputState.Commentators[idx] = next;
    }

    private void CommentatorDeleteBtnClicked(int idx)
    {
        InputState.Commentators.RemoveAt(idx);
    }

}
